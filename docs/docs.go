// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "description": "Получить список всех доступных категорий событий",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Получить все категории",
                "responses": {
                    "200": {
                        "description": "Список категорий",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Поиск событий по ключевым словам, датам, тегам и категории",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Поиск событий",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Номер страницы (по умолчанию 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Количество событий на странице (по умолчанию 30)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Ключевые слова для поиска",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Дата начала события в формате YYYY-MM-DD",
                        "name": "event_start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Дата окончания события в формате YYYY-MM-DD",
                        "name": "event_end",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Список тегов",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "ID категории",
                        "name": "category_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список событий",
                        "schema": {
                            "$ref": "#/definitions/events.GetEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Data",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новое событие в системе. Необходимо передать JSON-объект с данными события.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Создание события",
                "parameters": [
                    {
                        "description": "Данные для создания события",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/events.NewEventRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Событие успешно создано",
                        "schema": {
                            "$ref": "#/definitions/events.NewEventResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные данные",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events/categories/{category}": {
            "get": {
                "description": "Возвращает события по ID категории",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Получение событий по категори",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/events.GetEventsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events/favorites": {
            "get": {
                "description": "Возвращает избранные события",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Получение избранных событий",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Номер страницы (по умолчанию 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Количество событий на странице (по умолчанию 30)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/events.GetEventsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events/favorites/{id}": {
            "post": {
                "description": "Добавить событие в избранное",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Добавление события в изсбранное",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет событие из списка избранного",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Удаление события из избранного",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events/subscription": {
            "get": {
                "description": "Возвращает события пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Получение событий по подпискам пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/events.GetEventsResponse"
                        }
                    },
                    "403": {
                        "description": "Status forbidden",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events/user/{id}": {
            "get": {
                "description": "Возвращает события пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Получение событий пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/events.GetEventsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/events/{id}": {
            "get": {
                "description": "Возвращает информацию о событии по его идентификатору",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Получение события по ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/events.EventResponse"
                        }
                    },
                    "404": {
                        "description": "Event Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет данные существующего события. Необходимо передать JSON-объект с данными события и идентификатором события в URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Обновление события",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Идентификатор события",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления события",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/events.NewEventRequest"
                        }
                    },
                    {
                        "type": "file",
                        "description": "Изображение события",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление события",
                        "schema": {
                            "$ref": "#/definitions/events.NewEventResponse"
                        }
                    },
                    "400": {
                        "description": "Неверные данные",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "401": {
                        "description": "Неавторизован",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "403": {
                        "description": "Доступ запрещен",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "404": {
                        "description": "Событие не найдено",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет существующее событие",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Удаление события",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "403": {
                        "description": "Access Denied",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "404": {
                        "description": "Event Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "description": "Возвращает уведомления по идентификатору пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Получение уведомлений по ID пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetNotificationsResponse"
                        }
                    },
                    "404": {
                        "description": "Notification Not Found",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            },
            "post": {
                "description": "Создание уведомления",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Создание уведомления",
                "parameters": [
                    {
                        "description": "Данные для создания уведомления",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/profile/{id}": {
            "get": {
                "description": "Возвращает информацию о профиле текущего пользователя",
                "tags": [
                    "profile"
                ],
                "summary": "Профиль пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        },
        "/users/subscribe/{id}": {
            "post": {
                "description": "Подписка на пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Подписка на пользователя",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "404": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "409": {
                        "description": "Self subscription",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httpErrors.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "events.EventResponse": {
            "type": "object",
            "properties": {
                "Latitude": {
                    "type": "number"
                },
                "Longitude": {
                    "type": "number"
                },
                "author": {
                    "type": "integer"
                },
                "capacity": {
                    "type": "integer"
                },
                "category_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "event_end": {
                    "type": "string"
                },
                "event_start": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "tag": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "events.GetEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/events.EventResponse"
                    }
                }
            }
        },
        "events.NewEventRequest": {
            "type": "object",
            "properties": {
                "Latitude": {
                    "type": "number"
                },
                "Longitude": {
                    "type": "number"
                },
                "capacity": {
                    "type": "integer"
                },
                "category_id": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "event_end": {
                    "type": "string"
                },
                "event_start": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "tag": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "events.NewEventResponse": {
            "type": "object",
            "properties": {
                "event": {
                    "$ref": "#/definitions/events.EventResponse"
                }
            }
        },
        "handlers.CreateNotificationRequest": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "notify_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "handlers.GetNotificationsResponse": {
            "type": "object",
            "properties": {
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Notification"
                    }
                }
            }
        },
        "handlers.ProfileResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "httpErrors.HttpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Notification": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "notify_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger Vihodnoy API",
	Description:      "This is a description of the Vihodnoy server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
