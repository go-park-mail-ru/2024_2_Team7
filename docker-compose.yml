services:
  auth_service:
    container_name: auth_service_${COMMIT_HASH}
    build:
      context: .
      dockerfile: build/auth.Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    ports:
      - "50051:50051"
      - "9091:9091"

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app

  user_service:
    container_name: user_service_${COMMIT_HASH}
    build:
      context: .
      dockerfile: build/user.Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    ports:
      - "50052:50052"
      - "9092:9092"

    depends_on:
      postgres:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app

  event_service:
    container_name: event_service_${COMMIT_HASH}
    build:
      context: .
      dockerfile: build/event.Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    ports:
      - "50053:50053"
      - "9093:9093"

    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app

  image_service:
    container_name: image_service_${COMMIT_HASH}
    build:
      context: .
      dockerfile: build/image.Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    ports:
      - "50054:50054"
      - "9094:9094"

    env_file:
      - .env
    volumes:
      - .:/app

  notification_service:
    container_name: notification_service_${COMMIT_HASH}
    build:
      context: .
      dockerfile: build/notification.Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    ports:
      - "50056:50056"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app

  server_service:
    container_name: server_service_${COMMIT_HASH}
    build:
      context: .
      dockerfile: build/server.Dockerfile
      args:
        COMMIT_HASH: ${COMMIT_HASH}
    ports:
      - "8080:8080"
    depends_on:
      auth_service:
        condition: service_started
      user_service:
        condition: service_started
      event_service:
        condition: service_started
      image_service:
        condition: service_started
      notification_service:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "8090:9090"

  grafana:
    image: grafana/grafana-oss:9.4.3
    ports:
      - "8095:3000"
    volumes:
      - grafana-data:/var/lib/grafana

  postgres:
    image: postgis/postgis:latest
    container_name: my_pg_container
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    ports:
      - "6379:6379" 
      
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"

  nginx:
    container_name: nginx
    restart: unless-stopped
    image: nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      server_service:
        condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt/live/vyhodnoy.online/fullchain.pem:/etc/ssl/certs/fullchain.pem:ro
      - /etc/letsencrypt/live/vyhodnoy.online/privkey.pem:/etc/ssl/private/privkey.pem:ro
      - /home/user/Desktop/2024_2_Komanda7/public:/usr/share/nginx/html:ro
      - /home/user/Desktop/2024_2_Team7/static/images:/usr/share/nginx/static/images:ro

volumes:
  postgres_data:
    driver: local
  grafana-data:
  letsencrypt:

networks:
  default:
    name: team7_network

