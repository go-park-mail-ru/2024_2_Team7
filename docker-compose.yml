services:
  auth_service:
    build:
      context: .
      dockerfile: ./internal/auth/Dockerfile
    ports:
      - "50051:50051"
      - "9091:9091"

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app

  user_service:
    build:
      context: .
      dockerfile: ./internal/user/Dockerfile
    ports:
      - "50052:50052"
      - "9092:9092"

    depends_on:
      postgres:
        condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app

  event_service:
    build:
      context: .
      dockerfile: ./internal/event/Dockerfile
    ports:
      - "50053:50053"
      - "9093:9093"

    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app

  image_service:

    build:
      context: .
      dockerfile: ./internal/image/Dockerfile
    ports:
      - "50054:50054"
      - "9094:9094"

    env_file:
      - .env
    volumes:
      - .:/app

  # csat_service:
  #   build:
  #     context: .
  #     dockerfile: ./internal/csat/Dockerfile
  #   ports:
  #     - "50055:50055"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   volumes:
  #     - .:/app

  server_service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    # depends_on:
    #   auth_service:
    #     condition: service_started
    #   user_service:
    #     condition: service_started
    #   event_service:
    #     condition: service_started
    #   image_service:
    #     condition: service_started
    env_file:
      - .env
    volumes:
      - .:/app

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-oss:9.4.3
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana

  postgres:
    image: postgis/postgis:latest
    container_name: my_pg_container
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:latest
    ports:
      - "6379:6379" 
      
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
 

volumes:
  postgres_data:
    driver: local
  grafana-data:

networks:
  default:
    name: team7_network

