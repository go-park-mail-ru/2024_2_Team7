// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	models "kudago/internal/models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson105b9e27DecodeKudagoInternalGatewayEvent(in *jlexer.Lexer, out *NotificationWithEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notification":
			(out.Notification).UnmarshalEasyJSON(in)
		case "event":
			easyjson105b9e27DecodeKudagoInternalModels(in, &out.Event)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson105b9e27EncodeKudagoInternalGatewayEvent(out *jwriter.Writer, in NotificationWithEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notification\":"
		out.RawString(prefix[1:])
		(in.Notification).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix)
		easyjson105b9e27EncodeKudagoInternalModels(out, in.Event)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationWithEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson105b9e27EncodeKudagoInternalGatewayEvent(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationWithEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson105b9e27EncodeKudagoInternalGatewayEvent(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationWithEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson105b9e27DecodeKudagoInternalGatewayEvent(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationWithEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson105b9e27DecodeKudagoInternalGatewayEvent(l, v)
}
func easyjson105b9e27DecodeKudagoInternalModels(in *jlexer.Lexer, out *models.Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "event_start":
			out.EventStart = string(in.String())
		case "event_finish":
			out.EventEnd = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "capacity":
			out.Capacity = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "category_id":
			out.CategoryID = int(in.Int())
		case "author":
			out.AuthorID = int(in.Int())
		case "Latitude":
			out.Latitude = float64(in.Float64())
		case "Longitude":
			out.Longitude = float64(in.Float64())
		case "tag":
			if in.IsNull() {
				in.Skip()
				out.Tag = nil
			} else {
				in.Delim('[')
				if out.Tag == nil {
					if !in.IsDelim(']') {
						out.Tag = make([]string, 0, 4)
					} else {
						out.Tag = []string{}
					}
				} else {
					out.Tag = (out.Tag)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Tag = append(out.Tag, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image":
			out.ImageURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson105b9e27EncodeKudagoInternalModels(out *jwriter.Writer, in models.Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"event_start\":"
		out.RawString(prefix)
		out.String(string(in.EventStart))
	}
	{
		const prefix string = ",\"event_finish\":"
		out.RawString(prefix)
		out.String(string(in.EventEnd))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"capacity\":"
		out.RawString(prefix)
		out.Int(int(in.Capacity))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"category_id\":"
		out.RawString(prefix)
		out.Int(int(in.CategoryID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"Latitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Latitude))
	}
	{
		const prefix string = ",\"Longitude\":"
		out.RawString(prefix)
		out.Float64(float64(in.Longitude))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		if in.Tag == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tag {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	out.RawByte('}')
}
func easyjson105b9e27DecodeKudagoInternalGatewayEvent1(in *jlexer.Lexer, out *GetNotificationsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				in.Delim('[')
				if out.Notifications == nil {
					if !in.IsDelim(']') {
						out.Notifications = make([]NotificationWithEvent, 0, 0)
					} else {
						out.Notifications = []NotificationWithEvent{}
					}
				} else {
					out.Notifications = (out.Notifications)[:0]
				}
				for !in.IsDelim(']') {
					var v4 NotificationWithEvent
					(v4).UnmarshalEasyJSON(in)
					out.Notifications = append(out.Notifications, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson105b9e27EncodeKudagoInternalGatewayEvent1(out *jwriter.Writer, in GetNotificationsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix[1:])
		if in.Notifications == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Notifications {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetNotificationsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson105b9e27EncodeKudagoInternalGatewayEvent1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetNotificationsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson105b9e27EncodeKudagoInternalGatewayEvent1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetNotificationsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson105b9e27DecodeKudagoInternalGatewayEvent1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetNotificationsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson105b9e27DecodeKudagoInternalGatewayEvent1(l, v)
}
