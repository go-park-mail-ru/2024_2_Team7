// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventService_AddEvent_FullMethodName                 = "/event.EventService/AddEvent"
	EventService_AddEventToFavorites_FullMethodName      = "/event.EventService/AddEventToFavorites"
	EventService_DeleteEventFromFavorites_FullMethodName = "/event.EventService/DeleteEventFromFavorites"
	EventService_DeleteEvent_FullMethodName              = "/event.EventService/DeleteEvent"
	EventService_GetCategories_FullMethodName            = "/event.EventService/GetCategories"
	EventService_GetEventByID_FullMethodName             = "/event.EventService/GetEventByID"
	EventService_GetEventsByCategory_FullMethodName      = "/event.EventService/GetEventsByCategory"
	EventService_GetEventsByUser_FullMethodName          = "/event.EventService/GetEventsByUser"
	EventService_GetFavorites_FullMethodName             = "/event.EventService/GetFavorites"
	EventService_GetPastEvents_FullMethodName            = "/event.EventService/GetPastEvents"
	EventService_GetUpcomingEvents_FullMethodName        = "/event.EventService/GetUpcomingEvents"
	EventService_GetSubscriptionsEvents_FullMethodName   = "/event.EventService/GetSubscriptionsEvents"
	EventService_UpdateEvent_FullMethodName              = "/event.EventService/UpdateEvent"
	EventService_SearchEvents_FullMethodName             = "/event.EventService/SearchEvents"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	AddEventToFavorites(ctx context.Context, in *FavoriteEvent, opts ...grpc.CallOption) (*Empty, error)
	DeleteEventFromFavorites(ctx context.Context, in *FavoriteEvent, opts ...grpc.CallOption) (*Empty, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*Event, error)
	GetEventsByCategory(ctx context.Context, in *GetEventsByCategoryRequest, opts ...grpc.CallOption) (*Events, error)
	GetEventsByUser(ctx context.Context, in *GetEventsByUserRequest, opts ...grpc.CallOption) (*Events, error)
	GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*Events, error)
	GetPastEvents(ctx context.Context, in *PaginationParams, opts ...grpc.CallOption) (*Events, error)
	GetUpcomingEvents(ctx context.Context, in *PaginationParams, opts ...grpc.CallOption) (*Events, error)
	GetSubscriptionsEvents(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*Events, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	SearchEvents(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*Events, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventService_AddEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) AddEventToFavorites(ctx context.Context, in *FavoriteEvent, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, EventService_AddEventToFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEventFromFavorites(ctx context.Context, in *FavoriteEvent, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, EventService_DeleteEventFromFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, EventService_DeleteEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, EventService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventService_GetEventByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventsByCategory(ctx context.Context, in *GetEventsByCategoryRequest, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_GetEventsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventsByUser(ctx context.Context, in *GetEventsByUserRequest, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_GetEventsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_GetFavorites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetPastEvents(ctx context.Context, in *PaginationParams, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_GetPastEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetUpcomingEvents(ctx context.Context, in *PaginationParams, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_GetUpcomingEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetSubscriptionsEvents(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_GetSubscriptionsEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, EventService_UpdateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) SearchEvents(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*Events, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Events)
	err := c.cc.Invoke(ctx, EventService_SearchEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility.
type EventServiceServer interface {
	AddEvent(context.Context, *Event) (*Event, error)
	AddEventToFavorites(context.Context, *FavoriteEvent) (*Empty, error)
	DeleteEventFromFavorites(context.Context, *FavoriteEvent) (*Empty, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*Empty, error)
	GetCategories(context.Context, *Empty) (*GetCategoriesResponse, error)
	GetEventByID(context.Context, *GetEventByIDRequest) (*Event, error)
	GetEventsByCategory(context.Context, *GetEventsByCategoryRequest) (*Events, error)
	GetEventsByUser(context.Context, *GetEventsByUserRequest) (*Events, error)
	GetFavorites(context.Context, *GetFavoritesRequest) (*Events, error)
	GetPastEvents(context.Context, *PaginationParams) (*Events, error)
	GetUpcomingEvents(context.Context, *PaginationParams) (*Events, error)
	GetSubscriptionsEvents(context.Context, *GetSubscriptionsRequest) (*Events, error)
	UpdateEvent(context.Context, *Event) (*Event, error)
	SearchEvents(context.Context, *SearchParams) (*Events, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventServiceServer struct{}

func (UnimplementedEventServiceServer) AddEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (UnimplementedEventServiceServer) AddEventToFavorites(context.Context, *FavoriteEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEventToFavorites not implemented")
}
func (UnimplementedEventServiceServer) DeleteEventFromFavorites(context.Context, *FavoriteEvent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventFromFavorites not implemented")
}
func (UnimplementedEventServiceServer) DeleteEvent(context.Context, *DeleteEventRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServiceServer) GetCategories(context.Context, *Empty) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedEventServiceServer) GetEventByID(context.Context, *GetEventByIDRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (UnimplementedEventServiceServer) GetEventsByCategory(context.Context, *GetEventsByCategoryRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByCategory not implemented")
}
func (UnimplementedEventServiceServer) GetEventsByUser(context.Context, *GetEventsByUserRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByUser not implemented")
}
func (UnimplementedEventServiceServer) GetFavorites(context.Context, *GetFavoritesRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedEventServiceServer) GetPastEvents(context.Context, *PaginationParams) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPastEvents not implemented")
}
func (UnimplementedEventServiceServer) GetUpcomingEvents(context.Context, *PaginationParams) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingEvents not implemented")
}
func (UnimplementedEventServiceServer) GetSubscriptionsEvents(context.Context, *GetSubscriptionsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionsEvents not implemented")
}
func (UnimplementedEventServiceServer) UpdateEvent(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServiceServer) SearchEvents(context.Context, *SearchParams) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchEvents not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}
func (UnimplementedEventServiceServer) testEmbeddedByValue()                      {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_AddEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_AddEventToFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddEventToFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_AddEventToFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddEventToFavorites(ctx, req.(*FavoriteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEventFromFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEventFromFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEventFromFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEventFromFavorites(ctx, req.(*FavoriteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventByID(ctx, req.(*GetEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventsByCategory(ctx, req.(*GetEventsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventsByUser(ctx, req.(*GetEventsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetFavorites(ctx, req.(*GetFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetPastEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetPastEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetPastEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetPastEvents(ctx, req.(*PaginationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetUpcomingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetUpcomingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetUpcomingEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetUpcomingEvents(ctx, req.(*PaginationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetSubscriptionsEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetSubscriptionsEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetSubscriptionsEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetSubscriptionsEvents(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_UpdateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_SearchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).SearchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_SearchEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).SearchEvents(ctx, req.(*SearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEvent",
			Handler:    _EventService_AddEvent_Handler,
		},
		{
			MethodName: "AddEventToFavorites",
			Handler:    _EventService_AddEventToFavorites_Handler,
		},
		{
			MethodName: "DeleteEventFromFavorites",
			Handler:    _EventService_DeleteEventFromFavorites_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _EventService_GetCategories_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _EventService_GetEventByID_Handler,
		},
		{
			MethodName: "GetEventsByCategory",
			Handler:    _EventService_GetEventsByCategory_Handler,
		},
		{
			MethodName: "GetEventsByUser",
			Handler:    _EventService_GetEventsByUser_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _EventService_GetFavorites_Handler,
		},
		{
			MethodName: "GetPastEvents",
			Handler:    _EventService_GetPastEvents_Handler,
		},
		{
			MethodName: "GetUpcomingEvents",
			Handler:    _EventService_GetUpcomingEvents_Handler,
		},
		{
			MethodName: "GetSubscriptionsEvents",
			Handler:    _EventService_GetSubscriptionsEvents_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "SearchEvents",
			Handler:    _EventService_SearchEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
