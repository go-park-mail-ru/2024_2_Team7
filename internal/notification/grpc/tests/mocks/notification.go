// Code generated by MockGen. DO NOT EDIT.
// Source: notification.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "kudago/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockNotificationService) CreateNotification(ctx context.Context, notification models.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationServiceMockRecorder) CreateNotification(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationService)(nil).CreateNotification), ctx, notification)
}

// CreateNotificationsByUserIDs mocks base method.
func (m *MockNotificationService) CreateNotificationsByUserIDs(ctx context.Context, ids []int, ntf models.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotificationsByUserIDs", ctx, ids, ntf)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotificationsByUserIDs indicates an expected call of CreateNotificationsByUserIDs.
func (mr *MockNotificationServiceMockRecorder) CreateNotificationsByUserIDs(ctx, ids, ntf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotificationsByUserIDs", reflect.TypeOf((*MockNotificationService)(nil).CreateNotificationsByUserIDs), ctx, ids, ntf)
}

// DeleteNotification mocks base method.
func (m *MockNotificationService) DeleteNotification(ctx context.Context, ID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotification", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotification indicates an expected call of DeleteNotification.
func (mr *MockNotificationServiceMockRecorder) DeleteNotification(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotification", reflect.TypeOf((*MockNotificationService)(nil).DeleteNotification), ctx, ID)
}

// GetNotifications mocks base method.
func (m *MockNotificationService) GetNotifications(ctx context.Context, userID int) ([]models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", ctx, userID)
	ret0, _ := ret[0].([]models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockNotificationServiceMockRecorder) GetNotifications(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockNotificationService)(nil).GetNotifications), ctx, userID)
}

// UpdateSentNotifications mocks base method.
func (m *MockNotificationService) UpdateSentNotifications(ctx context.Context, IDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSentNotifications", ctx, IDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSentNotifications indicates an expected call of UpdateSentNotifications.
func (mr *MockNotificationServiceMockRecorder) UpdateSentNotifications(ctx, IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSentNotifications", reflect.TypeOf((*MockNotificationService)(nil).UpdateSentNotifications), ctx, IDs)
}
