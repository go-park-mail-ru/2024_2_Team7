// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: csat.proto

package csat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpcCSAT "kudago/internal/csat/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CSATService_GetTest_FullMethodName    = "/csat.CSATService/GetTest"
	CSATService_AddAnswers_FullMethodName = "/csat.CSATService/AddAnswers"
)

// CSATServiceClient is the client API for CSATService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSATServiceClient interface {
	GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error)
	AddAnswers(ctx context.Context, in *AddAnswersRequest, opts ...grpc.CallOption) (*Empty, error)
}

type cSATServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCSATServiceClient(cc grpc.ClientConnInterface) CSATServiceClient {
	return &cSATServiceClient{cc}
}

func (c *cSATServiceClient) GetTest(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*GetTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTestResponse)
	err := c.cc.Invoke(ctx, CSATService_GetTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSATServiceClient) AddAnswers(ctx context.Context, in *AddAnswersRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CSATService_AddAnswers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSATServiceServer is the server API for CSATService service.
// All implementations must embed UnimplementedCSATServiceServer
// for forward compatibility.
type CSATServiceServer interface {
	GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error)
	AddAnswers(context.Context, *AddAnswersRequest) (*Empty, error)
	mustEmbedUnimplementedCSATServiceServer()
}

// UnimplementedCSATServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCSATServiceServer struct{}

func (UnimplementedCSATServiceServer) GetTest(context.Context, *GetTestRequest) (*GetTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTest not implemented")
}
func (UnimplementedCSATServiceServer) AddAnswers(context.Context, *AddAnswersRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnswers not implemented")
}
func (UnimplementedCSATServiceServer) mustEmbedUnimplementedCSATServiceServer() {}
func (UnimplementedCSATServiceServer) testEmbeddedByValue()                     {}

// UnsafeCSATServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSATServiceServer will
// result in compilation errors.
type UnsafeCSATServiceServer interface {
	mustEmbedUnimplementedCSATServiceServer()
}

func RegisterCSATServiceServer(s grpc.ServiceRegistrar, srv *grpcCSAT.ServerAPI) {
	// If the following call pancis, it indicates UnimplementedCSATServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CSATService_ServiceDesc, srv)
}

func _CSATService_GetTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServiceServer).GetTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSATService_GetTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServiceServer).GetTest(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSATService_AddAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSATServiceServer).AddAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSATService_AddAnswers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSATServiceServer).AddAnswers(ctx, req.(*AddAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSATService_ServiceDesc is the grpc.ServiceDesc for CSATService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSATService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "csat.CSATService",
	HandlerType: (*CSATServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTest",
			Handler:    _CSATService_GetTest_Handler,
		},
		{
			MethodName: "AddAnswers",
			Handler:    _CSATService_AddAnswers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csat.proto",
}
